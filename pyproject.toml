[project]
name = "whittle"
version = "0.2.0"
description = "Two-stage neural architecture search for large language models"
authors = [{name = "Aaron Klein"},
    {name = "Arber Zela"},
    {name = "Rhea Sukthanker"},
    {name = "Timur Carstensen"}]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.9,<3.12"
# TODO: Some of these might be able to be moved to optional dependancies
dependencies = [
  "pandas",
  "matplotlib",
  "typing-extensions",
  "torch>=2",
  "transformers>=4",
  "litgpt[all]==0.5.0",
  "syne-tune[moo]>=0.13",
  "torchvision>=0.18",
  "deepspeed"
]
classifiers = [
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Topic :: Scientific/Engineering",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]

[project.urls]
homepage = "https://github.com/whittle-org/whittle"
# TODO: documentation = "https://whittle-org.github.io/whittle/"

[project.optional-dependencies]
dev = [
  # -- deploy --
  "build",
  # -- ci --
  "pre-commit",
  "pytest>=8",
  "ruff",
  "mypy",
  "commitizen",
  # -- docs --
  "mike",
  "mkdocs",
  "mkdocs-material",
  "mkdocs-autorefs",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocstrings[python]",
  "black",  # Allows mkdocstrings to do formatting...
]

[tool.setuptools.packages.find]
include = [
    "whittle",
    "whittle.*",
]
exclude = []

[build-system]
requires = [
    "setuptools>=68.2.2",
    "wheel>=0.41.2",
]
build-backend = "setuptools.build_meta"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
update_changelog_on_bump = true
version_files = ["pyproject.toml:version", "whittle/__version__.py"]
changelog_start_rev = "0.1.3"

[tool.ruff]
target-version = "py39"  # Match lowest supported
# Exclude a variety of commonly ignored directories.
exclude = [
    "supernet_configs",
    "plotting",
    "githooks",
    "benchmarks",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "E4",
  "E7",
  "E9",
  "F",
  "UP",
  "INP001", # https://docs.astral.sh/ruff/rules/implicit-namespace-package/#implicit-namespace-package-inp001
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

[tool.ruff.lint.isort]
known-first-party = ["whittle", "examples", "sinc"]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true
